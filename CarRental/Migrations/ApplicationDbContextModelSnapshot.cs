// <auto-generated />
using System;
using CarRental.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRental.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarRental.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e5f503c-a787-4a96-bc11-3eed2034ef37",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Money = 1000m,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHsAN6ytJ7kSrbNH3KFbJgA4SjSRe1CVa4M61aMZNDzVPy8RFCRJaqcxmbpP7H8GZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "31ad76b1-093e-4c60-9dd6-d814419568f2",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e979f09-e1c7-4c13-9942-8894aea638ee",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Money = 1000m,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENBPZe/4y+nazj0BmCYckR/7Nm6zXQuZ7lTJbvkvlxV4Um6wQG8lI5pSaG0S0dn0iQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bdf46704-ac5a-4f4b-bb66-0d30cdbdb414",
                            TwoFactorEnabled = false,
                            UserName = "user2@example.co"
                        },
                        new
                        {
                            Id = "owner1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7daff88f-cfb2-4d99-97b6-f52b92a1bbf3",
                            Email = "owner1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Money = 1000m,
                            NormalizedEmail = "OWNER1@EXAMPLE.COM",
                            NormalizedUserName = "OWNER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFdu/hHirEuAnXuNpJwYFRoxtlcT1nNm6QX4Kb1rSH6OtYsVVluAtXhemRls3OzUXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "887f07f3-5b1f-46b1-8293-dbe3442b7c9b",
                            TwoFactorEnabled = false,
                            UserName = "owner1"
                        },
                        new
                        {
                            Id = "owner2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75a8acd6-2655-4e90-a842-7f9b0f3acee0",
                            Email = "owner2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Money = 1000m,
                            NormalizedEmail = "OWNER2@EXAMPLE.COM",
                            NormalizedUserName = "OWNER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF70uQhaRkUSditFpf8yDj6bpEvML0BUmRS6/GvvStyhR+BDnx1hkcqsTDqOAk0H9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf1719a3-5eca-4c3f-a065-4ac440a53d3d",
                            TwoFactorEnabled = false,
                            UserName = "owner2"
                        },
                        new
                        {
                            Id = "Admin",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2aead61a-7411-4d37-a129-f6a605d07730",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Money = 1000m,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP7xykSLMpen3tBepRPWCucvyW8unjb54NcmTtbEpNYzVW2UQCVMPYPV1sUqLTr9cQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9f7ef2e-5a80-46ff-acea-dad5788d1a92",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("CarRental.Models.CarImage", b =>
                {
                    b.Property<string>("CarImageID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentalVehicleID")
                        .HasColumnType("int");

                    b.HasKey("CarImageID");

                    b.HasIndex("RentalVehicleID");

                    b.ToTable("CarImages");

                    b.HasData(
                        new
                        {
                            CarImageID = "1",
                            ImageUrl = "/images/Gallery/ToyotaCorolla_1.png",
                            RentalVehicleID = 1
                        },
                        new
                        {
                            CarImageID = "2",
                            ImageUrl = "/images/Gallery/ToyotaCorolla_2.png",
                            RentalVehicleID = 1
                        },
                        new
                        {
                            CarImageID = "3",
                            ImageUrl = "/images/Gallery/ToyotaCorolla_3.jpg",
                            RentalVehicleID = 1
                        },
                        new
                        {
                            CarImageID = "4",
                            ImageUrl = "/images/Gallery/FordFocus_1.jpg",
                            RentalVehicleID = 2
                        },
                        new
                        {
                            CarImageID = "5",
                            ImageUrl = "/images/Gallery/FordFocus_2.jpg",
                            RentalVehicleID = 2
                        },
                        new
                        {
                            CarImageID = "6",
                            ImageUrl = "/images/Gallery/BMWx5_1.jpg",
                            RentalVehicleID = 3
                        },
                        new
                        {
                            CarImageID = "7",
                            ImageUrl = "/images/Gallery/BMWx5_2.jpg",
                            RentalVehicleID = 3
                        },
                        new
                        {
                            CarImageID = "8",
                            ImageUrl = "/images/Gallery/HondaCivic_1.jpg",
                            RentalVehicleID = 4
                        },
                        new
                        {
                            CarImageID = "9",
                            ImageUrl = "/images/Gallery/HondaCivic_2.jpg",
                            RentalVehicleID = 4
                        },
                        new
                        {
                            CarImageID = "10",
                            ImageUrl = "/images/Gallery/MercedesEclass_1.jpg",
                            RentalVehicleID = 5
                        },
                        new
                        {
                            CarImageID = "11",
                            ImageUrl = "/images/Gallery/MercedesEclass_2.jpg",
                            RentalVehicleID = 5
                        },
                        new
                        {
                            CarImageID = "12",
                            ImageUrl = "/images/Gallery/ChervroletTahoe_1.png",
                            RentalVehicleID = 6
                        },
                        new
                        {
                            CarImageID = "13",
                            ImageUrl = "/images/Gallery/ChervroletTahoe_2.png",
                            RentalVehicleID = 6
                        });
                });

            modelBuilder.Entity("CarRental.Models.Driver", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LicenseExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalIdUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            UserID = "owner1",
                            LicenseExpiryDate = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenseImageUrl = "/images/Licenses/license.jpg",
                            LicenseNumber = "59-V1 793.79",
                            NationalIdUrl = "/images/NationalID/NationalID.jpg",
                            Status = 1
                        },
                        new
                        {
                            UserID = "owner2",
                            LicenseExpiryDate = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicenseImageUrl = "/images/Licenses/license.jpg",
                            LicenseNumber = "DX-012321",
                            NationalIdUrl = "/images/NationalID/NationalID.jpg",
                            Status = 1
                        });
                });

            modelBuilder.Entity("CarRental.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CarRental.Models.Rental", b =>
                {
                    b.Property<int?>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("RentalId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PickUpLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RentalVehicleID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("depositFee")
                        .HasColumnType("real");

                    b.Property<float>("totalFee")
                        .HasColumnType("real");

                    b.HasKey("RentalId");

                    b.HasIndex("RentalVehicleID");

                    b.HasIndex("UserID");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("CarRental.Models.ShareDrive.DriverRide", b =>
                {
                    b.Property<int>("DriverRideID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverRideID"));

                    b.Property<DateTime?>("DepartDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly?>("DepartTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<string>("DriverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatLeft")
                        .HasColumnType("int");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DriverRideID");

                    b.HasIndex("DriverID");

                    b.ToTable("DriverRides");
                });

            modelBuilder.Entity("CarRental.Models.ShareDrive.PassengerRide", b =>
                {
                    b.Property<int>("PassengerRideID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassengerRideID"));

                    b.Property<DateTime?>("DepartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly?>("DepartTime")
                        .HasColumnType("time");

                    b.Property<float>("DepositFee")
                        .HasColumnType("real");

                    b.Property<int>("DriverRideID")
                        .HasColumnType("int");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassengerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("TotalFee")
                        .HasColumnType("real");

                    b.HasKey("PassengerRideID");

                    b.HasIndex("DriverRideID");

                    b.HasIndex("PassengerID");

                    b.ToTable("PassengerRides");
                });

            modelBuilder.Entity("CarRental.Models.Vehicle", b =>
                {
                    b.Property<int>("RentalVehicleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalVehicleID"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<float>("FuelConsumption")
                        .HasColumnType("real");

                    b.Property<int>("FuelType")
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ManuYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("RentalFeePerDay")
                        .HasColumnType("real");

                    b.Property<float>("RentalFeePerKilo")
                        .HasColumnType("real");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Transmission")
                        .HasColumnType("int");

                    b.HasKey("RentalVehicleID");

                    b.HasIndex("OwnerId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            RentalVehicleID = 1,
                            Brand = "Toyota",
                            Description = "Compact sedan, well-maintained, perfect for city driving.",
                            FuelConsumption = 8f,
                            FuelType = 0,
                            LicensePlate = "ABC1234",
                            Location = "Quan 1, TP HCM",
                            ManuYear = new DateTime(2018, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Model = "Corolla",
                            NumberOfSeats = 5,
                            OwnerId = "user1",
                            RentalFeePerDay = 25f,
                            RentalFeePerKilo = 0.18f,
                            ThumbnailUrl = "/images/Thumbnail/ToyotaCorolla.jpg",
                            TimeCreated = new DateTime(2025, 1, 2, 21, 40, 38, 108, DateTimeKind.Local).AddTicks(5401),
                            Transmission = 1
                        },
                        new
                        {
                            RentalVehicleID = 2,
                            Brand = "Ford",
                            Description = "Spacious hatchback, ideal for city drives and family trips.",
                            FuelConsumption = 9f,
                            FuelType = 0,
                            LicensePlate = "XYZ5678",
                            Location = "Quan 2, TP HCM",
                            ManuYear = new DateTime(2020, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Model = "Focus",
                            NumberOfSeats = 5,
                            OwnerId = "user1",
                            RentalFeePerDay = 30f,
                            RentalFeePerKilo = 0.2f,
                            ThumbnailUrl = "/images/Thumbnail/FordFocus.jpg",
                            TimeCreated = new DateTime(2025, 1, 2, 21, 40, 38, 108, DateTimeKind.Local).AddTicks(5428),
                            Transmission = 1
                        },
                        new
                        {
                            RentalVehicleID = 3,
                            Brand = "BMW",
                            Description = "Luxury SUV with premium features, perfect for long road trips.",
                            FuelConsumption = 10f,
                            FuelType = 1,
                            LicensePlate = "LMN7890",
                            Location = "Quan 3, TP HCM",
                            ManuYear = new DateTime(2022, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Model = "X5",
                            NumberOfSeats = 7,
                            OwnerId = "user1",
                            RentalFeePerDay = 95f,
                            RentalFeePerKilo = 0.5f,
                            ThumbnailUrl = "/images/Thumbnail/BMWx5.png",
                            TimeCreated = new DateTime(2025, 1, 2, 21, 40, 38, 108, DateTimeKind.Local).AddTicks(5431),
                            Transmission = 1
                        },
                        new
                        {
                            RentalVehicleID = 4,
                            Brand = "Honda",
                            Description = "Economical sedan, perfect for daily use and city driving.",
                            FuelConsumption = 11f,
                            FuelType = 0,
                            LicensePlate = "OPQ1122",
                            Location = "Quan 4, TP HCM",
                            ManuYear = new DateTime(2019, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Model = "Civic",
                            NumberOfSeats = 5,
                            OwnerId = "user2",
                            RentalFeePerDay = 22f,
                            RentalFeePerKilo = 0.17f,
                            ThumbnailUrl = "/images/Thumbnail/HondaCivic.png",
                            TimeCreated = new DateTime(2025, 1, 2, 21, 40, 38, 108, DateTimeKind.Local).AddTicks(5433),
                            Transmission = 1
                        },
                        new
                        {
                            RentalVehicleID = 5,
                            Brand = "Mercedes",
                            Description = "High-end luxury sedan with modern technology and comfort features.",
                            FuelConsumption = 8f,
                            FuelType = 0,
                            LicensePlate = "RST9876",
                            Location = "Quan 4, TP HCM",
                            ManuYear = new DateTime(2021, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Model = "E-Class",
                            NumberOfSeats = 5,
                            OwnerId = "user2",
                            RentalFeePerDay = 150f,
                            RentalFeePerKilo = 1f,
                            ThumbnailUrl = "/images/Thumbnail/MercedesEclass.png",
                            TimeCreated = new DateTime(2025, 1, 2, 21, 40, 38, 108, DateTimeKind.Local).AddTicks(5435),
                            Transmission = 1
                        },
                        new
                        {
                            RentalVehicleID = 6,
                            Brand = "Chevrolet",
                            Description = "Spacious full-size SUV, great for large families or group trips.",
                            FuelConsumption = 10f,
                            FuelType = 0,
                            LicensePlate = "UVW6543",
                            Location = "Quan 4, TP HCM",
                            ManuYear = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Model = "Tahoe",
                            NumberOfSeats = 8,
                            OwnerId = "owner1",
                            RentalFeePerDay = 85f,
                            RentalFeePerKilo = 0.6f,
                            ThumbnailUrl = "/images/Thumbnail/ChervroletTahoe.png",
                            TimeCreated = new DateTime(2025, 1, 2, 21, 40, 38, 108, DateTimeKind.Local).AddTicks(5437),
                            Transmission = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d02f5eec-7833-4042-bce4-b0e6476c60f2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "314ea080-d58e-49d7-b430-56ab3f632eb0",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = "59b2449c-2f4e-4ded-9fc0-0fa2524c9d0a",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "user1",
                            RoleId = "59b2449c-2f4e-4ded-9fc0-0fa2524c9d0a"
                        },
                        new
                        {
                            UserId = "user2",
                            RoleId = "59b2449c-2f4e-4ded-9fc0-0fa2524c9d0a"
                        },
                        new
                        {
                            UserId = "owner1",
                            RoleId = "314ea080-d58e-49d7-b430-56ab3f632eb0"
                        },
                        new
                        {
                            UserId = "owner2",
                            RoleId = "314ea080-d58e-49d7-b430-56ab3f632eb0"
                        },
                        new
                        {
                            UserId = "Admin",
                            RoleId = "d02f5eec-7833-4042-bce4-b0e6476c60f2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarRental.Models.CarImage", b =>
                {
                    b.HasOne("CarRental.Models.Vehicle", "RentalVehicle")
                        .WithMany("Gallery")
                        .HasForeignKey("RentalVehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentalVehicle");
                });

            modelBuilder.Entity("CarRental.Models.Driver", b =>
                {
                    b.HasOne("CarRental.Models.ApplicationUser", "User")
                        .WithOne("Driver")
                        .HasForeignKey("CarRental.Models.Driver", "UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRental.Models.Rental", b =>
                {
                    b.HasOne("CarRental.Models.Vehicle", "RentalVehicle")
                        .WithMany()
                        .HasForeignKey("RentalVehicleID");

                    b.HasOne("CarRental.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("RentalVehicle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRental.Models.ShareDrive.DriverRide", b =>
                {
                    b.HasOne("CarRental.Models.Driver", "Driver")
                        .WithMany("DriverRides")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("CarRental.Models.ShareDrive.PassengerRide", b =>
                {
                    b.HasOne("CarRental.Models.ShareDrive.DriverRide", "DriverRide")
                        .WithMany("PassengerRides")
                        .HasForeignKey("DriverRideID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarRental.Models.ApplicationUser", "Passenger")
                        .WithMany("PassengerRides")
                        .HasForeignKey("PassengerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DriverRide");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("CarRental.Models.Vehicle", b =>
                {
                    b.HasOne("CarRental.Models.ApplicationUser", "Owner")
                        .WithMany("RentalVehicles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarRental.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarRental.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarRental.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRental.Models.ApplicationUser", b =>
                {
                    b.Navigation("Driver");

                    b.Navigation("PassengerRides");

                    b.Navigation("RentalVehicles");
                });

            modelBuilder.Entity("CarRental.Models.Driver", b =>
                {
                    b.Navigation("DriverRides");
                });

            modelBuilder.Entity("CarRental.Models.ShareDrive.DriverRide", b =>
                {
                    b.Navigation("PassengerRides");
                });

            modelBuilder.Entity("CarRental.Models.Vehicle", b =>
                {
                    b.Navigation("Gallery");
                });
#pragma warning restore 612, 618
        }
    }
}
